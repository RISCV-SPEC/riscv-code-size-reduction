{
  "version": 1,
  "git": {
    "commit": "f3de7cbd07d7a595725b1f4abd79203f8172a859",
    "dirty": true
  },
  "embedding": "plain",
  "hashes": {},
  "functions": {
    "execute": {
      "function": [
        {
          "number": 0,
          "source": "function clause execute (C_LBU(uimm, rsc, rdc)) = {\n  let immext : xlenbits = EXTZ(uimm);\n  let rd = creg2reg_idx(rdc);\n  let rs = creg2reg_idx(rsc);\n  let rsext = X(rs) + immext;\n  \n  X(rd) = EXTZ(rsext[7..0]);\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_LBU",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "uimm" },
                  { "type": "id", "id": "rsc" },
                  { "type": "id", "id": "rdc" }
                ]
              }
            ]
          },
          "body": "  let immext : xlenbits = EXTZ(uimm);\n  let rd = creg2reg_idx(rdc);\n  let rs = creg2reg_idx(rsc);\n  let rsext = X(rs) + immext;\n  \n  X(rd) = EXTZ(rsext[7..0]);\n  RETIRE_SUCCESS"
        },
        {
          "number": 1,
          "source": "function clause execute (C_LHU(uimm, rsc, rdc)) = {\n  let immext : xlenbits = EXTZ(uimm);\n  let rd = creg2reg_idx(rdc);\n  let rs = creg2reg_idx(rsc);\n  let rsext = X(rs) + immext;\n  \n  X(rd) = EXTZ(rsext[15..0]);\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_LHU",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "uimm" },
                  { "type": "id", "id": "rsc" },
                  { "type": "id", "id": "rdc" }
                ]
              }
            ]
          },
          "body": "  let immext : xlenbits = EXTZ(uimm);\n  let rd = creg2reg_idx(rdc);\n  let rs = creg2reg_idx(rsc);\n  let rsext = X(rs) + immext;\n  \n  X(rd) = EXTZ(rsext[15..0]);\n  RETIRE_SUCCESS"
        },
        {
          "number": 2,
          "source": "function clause execute (C_LH(uimm, rsc, rdc)) = {\n  let immext : xlenbits = EXTZ(uimm);\n  let rd = creg2reg_idx(rdc);\n  let rs = creg2reg_idx(rsc);\n  let rsext = X(rs) + immext;\n  \n  X(rd) = EXTS(rsext[15..0]);\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_LH",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "uimm" },
                  { "type": "id", "id": "rsc" },
                  { "type": "id", "id": "rdc" }
                ]
              }
            ]
          },
          "body": "  let immext : xlenbits = EXTZ(uimm);\n  let rd = creg2reg_idx(rdc);\n  let rs = creg2reg_idx(rsc);\n  let rsext = X(rs) + immext;\n  \n  X(rd) = EXTS(rsext[15..0]);\n  RETIRE_SUCCESS"
        },
        {
          "number": 3,
          "source": "function clause execute (C_SB(uimm, rs1c, rs2c)) = {\n  let immext : xlenbits = EXTZ(uimm);\n  let rs1c = creg2reg_idx(rs1c);\n  let rs2c = creg2reg_idx(rs2c);\n  let rsext = X(rs1c) + immext;\n  \n  // MemValue(rsext[7..0]) = X(rs2c);\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_SB",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "uimm" },
                  { "type": "id", "id": "rs1c" },
                  { "type": "id", "id": "rs2c" }
                ]
              }
            ]
          },
          "body": "  let immext : xlenbits = EXTZ(uimm);\n  let rs1c = creg2reg_idx(rs1c);\n  let rs2c = creg2reg_idx(rs2c);\n  let rsext = X(rs1c) + immext;\n  \n  // MemValue(rsext[7..0]) = X(rs2c);\n  RETIRE_SUCCESS"
        },
        {
          "number": 4,
          "source": "function clause execute (C_SH(uimm, rs1c, rs2c)) = {\n  let immext : xlenbits = EXTZ(uimm);\n  let rs2c = creg2reg_idx(rs2c);\n  let rs1c = creg2reg_idx(rs1c);\n  let rsext = X(rs1c) + immext;\n  \n  // MemValue(rsext[15..0]) = X(rs2c);\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_SH",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "uimm" },
                  { "type": "id", "id": "rs1c" },
                  { "type": "id", "id": "rs2c" }
                ]
              }
            ]
          },
          "body": "  let immext : xlenbits = EXTZ(uimm);\n  let rs2c = creg2reg_idx(rs2c);\n  let rs1c = creg2reg_idx(rs1c);\n  let rsext = X(rs1c) + immext;\n  \n  // MemValue(rsext[15..0]) = X(rs2c);\n  RETIRE_SUCCESS"
        },
        {
          "number": 5,
          "source": "function clause execute (C_ZEXT_B(rsd)) = {\n  let rsdc = creg2reg_idx(rsd);\n  \n  X(rsdc) = EXTZ(X(rsdc)[7..0]);\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_ZEXT_B",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "body": "  let rsdc = creg2reg_idx(rsd);\n  \n  X(rsdc) = EXTZ(X(rsdc)[7..0]);\n  RETIRE_SUCCESS"
        },
        {
          "number": 6,
          "source": "function clause execute (C_SEXT_B(rsd)) = {\n  let rsdc = creg2reg_idx(rsd);\n  \n  X(rsdc) = EXTS(X(rsdc)[7..0]);\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_SEXT_B",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "body": "  let rsdc = creg2reg_idx(rsd);\n  \n  X(rsdc) = EXTS(X(rsdc)[7..0]);\n  RETIRE_SUCCESS"
        },
        {
          "number": 7,
          "source": "function clause execute (C_ZEXT_H(rsd)) = {\n  let rsdc = creg2reg_idx(rsd);\n  \n  X(rsdc) = EXTZ(X(rsdc)[15..0]);\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_ZEXT_H",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "body": "  let rsdc = creg2reg_idx(rsd);\n  \n  X(rsdc) = EXTZ(X(rsdc)[15..0]);\n  RETIRE_SUCCESS"
        },
        {
          "number": 8,
          "source": "function clause execute (C_SEXT_H(rsd)) = {\n  let rsdc = creg2reg_idx(rsd);\n  \n  X(rsdc) = EXTS(X(rsdc)[15..0]);\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_SEXT_H",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "body": "  let rsdc = creg2reg_idx(rsd);\n  \n  X(rsdc) = EXTS(X(rsdc)[15..0]);\n  RETIRE_SUCCESS"
        },
        {
          "number": 9,
          "source": "function clause execute (C_ZEXT_W(rsd)) = {\n  let rsdc = creg2reg_idx(rsd);\n  \n  X(rsdc) = EXTZ(X(rsdc)[31..0]);\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_ZEXT_W",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "body": "  let rsdc = creg2reg_idx(rsd);\n  \n  X(rsdc) = EXTZ(X(rsdc)[31..0]);\n  RETIRE_SUCCESS"
        },
        {
          "number": 10,
          "source": "function clause execute (C_MUL(rsd,rs2)) = {\n  let rd = creg2reg_idx(rsd);\n  let rs = creg2reg_idx(rs2);\n  \n  let result_wide = to_bits(2 * sizeof(xlen), signed(X(rd)) * signed(X(rs)));\n  X(rd) = result_wide[(sizeof(xlen) - 1) .. 0];\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_MUL",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "rsd" },
                  { "type": "id", "id": "rs2" }
                ]
              }
            ]
          },
          "body": "  let rd = creg2reg_idx(rsd);\n  let rs = creg2reg_idx(rs2);\n  \n  let result_wide = to_bits(2 * sizeof(xlen), signed(X(rd)) * signed(X(rs)));\n  X(rd) = result_wide[(sizeof(xlen) - 1) .. 0];\n  RETIRE_SUCCESS"
        },
        {
          "number": 11,
          "source": "function clause execute (C_NOT(rsd)) = {\n  let rsd = creg2reg_idx(rsd);\n  X(rsd) = ~(X(rsd));\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "C_NOT",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "body": "  let rsd = creg2reg_idx(rsd);\n  X(rsd) = ~(X(rsd));\n  RETIRE_SUCCESS"
        },
        {
          "number": 12,
          "source": "function clause execute (CM_PUSH(rlist,spimm)) = {\n  /*\n  if (sizeof(xlen) == 32) then {\n    bytes = 4\n  } else {\n    bytes = 8\n  };\n  \n  let stack_adj = stack_adj_base + spimm * 16;\n  let addr = sp - bytes;\n\n  let l : vector (13,dec,int) = [27,26,25,24,23,22,21,20,19,18,9,8,1];\n\n  foreach (i from 1 to 13) {\n    //if register i is in xreg_list\n    if (rlist[l[i]]) then {\n      match bytes {\n        4 => asm(\"sw x[l[i]], 0(addr)\"),\n        8 => asm(\"sd x[l[i]], 0(addr)\")\n      };\n      addr = addr - bytes;\n    }\n  };\n  sp = sp - stack_adj;\n  */\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "CM_PUSH",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "rlist" },
                  { "type": "id", "id": "spimm" }
                ]
              }
            ]
          },
          "body": "  RETIRE_SUCCESS"
        },
        {
          "number": 13,
          "source": "function clause execute (CM_POP(rlist,spimm)) = {\n  /*\n  if (xlenbits == 32) then {\n    bytes = 4\n  } else {\n    bytes = 8\n  };\n  \n  let stack_adj = stack_adj_base + spimm * 16;\n  let addr = sp + stack_adj - bytes;\n\n  let l : vector (13,dec,int) = [27,26,25,24,23,22,21,20,19,18,9,8,1];\n\n  foreach (i from 1 to 13) {\n    //if register i is in xreg_list\n    if (rlist[l[i]]) then {\n      match bytes {\n        4 => asm(\"lw x[l[i]], 0(addr)\"),\n        8 => asm(\"ld x[l[i]], 0(addr)\")\n      };\n      addr = addr - bytes;\n    }\n  };\n\n  sp = sp + stack_adj;\n  */\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "CM_POP",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "rlist" },
                  { "type": "id", "id": "spimm" }
                ]
              }
            ]
          },
          "body": "  RETIRE_SUCCESS"
        },
        {
          "number": 14,
          "source": "function clause execute (CM_POPRETZ(rlist,spimm)) = {\n  /*\n  if (xlenbits == 32) then {\n    bytes = 4\n  } else {\n    bytes = 8\n  };\n  \n  let stack_adj = stack_adj_base + spimm * 16;\n  let addr = sp + stack_adj - bytes;\n\n  let l : vector (13,dec,int) = [27,26,25,24,23,22,21,20,19,18,9,8,1];\n\n  foreach (i from 1 to 13) {\n    //if register i is in xreg_list\n    if (rlist[l[i]]) then {\n      match bytes {\n        4 => asm(\"lw x[l[i]], 0(addr)\"),\n        8 => asm(\"ld x[l[i]], 0(addr)\")\n      };\n      addr = addr - bytes;\n    }\n  };\n\n  asm(\"li a0, 0\");\n  sp = sp + stack_adj;\n  asm(\"ret\");\n  */\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "CM_POPRETZ",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "rlist" },
                  { "type": "id", "id": "spimm" }
                ]
              }
            ]
          },
          "body": "  RETIRE_SUCCESS"
        },
        {
          "number": 15,
          "source": "function clause execute (CM_POPRET(rlist,spimm)) = {\n  /*\n  if (xlenbits == 32) then {\n    bytes = 4\n  } else {\n    bytes = 8\n  };\n  \n  let stack_adj = stack_adj_base + spimm * 16;\n  let addr = sp + stack_adj - bytes;\n\n  let l : vector (13,dec,int) = [27,26,25,24,23,22,21,20,19,18,9,8,1];\n\n  foreach (i from 1 to 13) {\n    //if register i is in xreg_list\n    if (rlist[l[i]]) then {\n      match bytes {\n        4 => asm(\"lw x[l[i]], 0(addr)\"),\n        8 => asm(\"ld x[l[i]], 0(addr)\")\n      };\n      addr = addr - bytes;\n    }\n  };\n\n  sp = sp + stack_adj;\n  asm(\"ret\");\n  */\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "CM_POPRET",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "rlist" },
                  { "type": "id", "id": "spimm" }
                ]
              }
            ]
          },
          "body": "  RETIRE_SUCCESS"
        },
        {
          "number": 16,
          "source": "function clause execute (CM_MVSA01(sreg1,sreg2)) = {\n  if (sreg1 == sreg2) then {\n    RETIRE_FAIL\n  } else {\n    /*\n    if (RV32E & (sreg1>1 | sreg2>1)) then {\n      reserved();         \n    };\n    xreg1 = {sreg1[2..1]>0 & sreg1[2..1]==0 & sreg1[2..0]};\n    xreg2 = {sreg2[2..1]>0 & sreg2[2..1]==0 & sreg2[2..0]};\n\n    X[xreg1] = X[10];\n    X[xreg2] = X[11];\n    */\n    RETIRE_SUCCESS\n  }\n}",
          "pattern": {
            "type": "app",
            "id": "CM_MVSA01",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "sreg1" },
                  { "type": "id", "id": "sreg2" }
                ]
              }
            ]
          },
          "body": "  if (sreg1 == sreg2) then {\n    RETIRE_FAIL\n  } else {\n    /*\n    if (RV32E & (sreg1>1 | sreg2>1)) then {\n      reserved();         \n    };\n    xreg1 = {sreg1[2..1]>0 & sreg1[2..1]==0 & sreg1[2..0]};\n    xreg2 = {sreg2[2..1]>0 & sreg2[2..1]==0 & sreg2[2..0]};\n\n    X[xreg1] = X[10];\n    X[xreg2] = X[11];\n    */\n    RETIRE_SUCCESS\n  }"
        },
        {
          "number": 17,
          "source": "function clause execute (CM_MVA01S(sreg1,sreg2)) = {\n  /*\n  if (RV32E & (sreg1>1 | sreg2>1)) then {\n    reserved();\n  };\n  xreg1 = {sreg1[2..1]>0 & sreg1[2..1]==0 & sreg1[2..0]};\n  xreg2 = {sreg2[2..1]>0 & sreg2[2..1]==0 & sreg2[2..0]};\n\n  X[10] = X[xreg1];\n  X[11] = X[xreg2];\n  */\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "CM_MVA01S",
            "patterns": [
              {
                "type": "tuple",
                "patterns": [
                  { "type": "id", "id": "sreg1" },
                  { "type": "id", "id": "sreg2" }
                ]
              }
            ]
          },
          "body": "  RETIRE_SUCCESS"
        },
        {
          "number": 18,
          "source": "function clause execute (CM_JT(index)) = {\n  /*\n  match xlenbits {\n    32 => table_address[31..0] = JVT.base + (index<<2),\n    64 => table_address[63..0] = JVT.base + (index<<3)\n  };\n\n  //fetch from the jump table\n  target_address[(xlenbits - 1)..0] = InstMemory[table_address][(xlenbits - 1)..0];\n\n  asm (\"j target_address[(xlenbits - 1):0] &~ 0x1\");\n  */\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "CM_JT",
            "patterns": [ { "type": "id", "id": "index" } ]
          },
          "body": "  RETIRE_SUCCESS"
        },
        {
          "number": 19,
          "source": "function clause execute (CM_JALT(index)) = {\n  /*\n  match (xlenbits) {\n    32 => table_address[(xlenbits - 1)..0] = JVT.base + (index<<2),\n    64 => table_address[(xlenbits - 1)..0] = JVT.base + (index<<3)\n  };\n\n  //fetch from the jump table\n  target_address[(xlenbits - 1)..0] = InstMemory[table_address][(xlenbits - 1)..0];\n\n  asm(\"jal ra,target_address[(xlenbits - 1)..0] &~ 0x1\");\n  */\n  RETIRE_SUCCESS\n}",
          "pattern": {
            "type": "app",
            "id": "CM_JALT",
            "patterns": [ { "type": "id", "id": "index" } ]
          },
          "body": "  RETIRE_SUCCESS"
        }
      ],
      "links": [
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 10849, 10861 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 9928, 9940 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 9958, 9970 ]
        },
        {
          "type": "function",
          "id": "to_bits",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 10000, 10007 ]
        },
        {
          "type": "function",
          "id": "signed",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 10042, 10048 ]
        },
        {
          "type": "function",
          "id": "signed",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 10026, 10032 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 9056, 9068 ]
        },
        {
          "type": "function",
          "id": "EXTZ",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 9090, 9094 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 8572, 8584 ]
        },
        {
          "type": "function",
          "id": "EXTS",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 8606, 8610 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 8087, 8099 ]
        },
        {
          "type": "function",
          "id": "EXTZ",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 8121, 8125 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 7604, 7616 ]
        },
        {
          "type": "function",
          "id": "EXTS",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 7638, 7642 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 7120, 7132 ]
        },
        {
          "type": "function",
          "id": "EXTZ",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 7154, 7158 ]
        },
        {
          "type": "function",
          "id": "EXTZ",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 6184, 6188 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 6209, 6221 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 6242, 6254 ]
        },
        {
          "type": "function",
          "id": "EXTZ",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 5494, 5498 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 5519, 5531 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 5552, 5564 ]
        },
        {
          "type": "function",
          "id": "EXTZ",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 4822, 4826 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 4845, 4857 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 4875, 4887 ]
        },
        {
          "type": "function",
          "id": "EXTS",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 4937, 4941 ]
        },
        {
          "type": "function",
          "id": "EXTZ",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 4148, 4152 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 4171, 4183 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 4201, 4213 ]
        },
        {
          "type": "function",
          "id": "EXTZ",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 4263, 4267 ]
        },
        {
          "type": "function",
          "id": "EXTZ",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 3472, 3476 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 3495, 3507 ]
        },
        {
          "type": "function",
          "id": "creg2reg_idx",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 3525, 3537 ]
        },
        {
          "type": "function",
          "id": "EXTZ",
          "file": "model/riscv_insts_zce_ext.sail",
          "loc": [ 3587, 3591 ]
        }
      ]
    }
  },
  "mappings": {
    "assembly": {
      "mapping": [
        {
          "number": 0,
          "source": "mapping clause assembly = C_LBU(uimm, rsc, rdc)\n  <-> \"c.lbu\" ^ spc() ^ creg_name(rdc) ^ sep() ^ creg_name(rsc) ^ sep() ^ hex_bits_5(uimm @ 0b000)",
          "left": {
            "type": "app",
            "id": "C_LBU",
            "patterns": [
              { "type": "id", "id": "uimm" },
              { "type": "id", "id": "rsc" },
              { "type": "id", "id": "rdc" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.lbu\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rdc" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rsc" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_5",
                "patterns": [
                  {
                    "type": "vector_concat",
                    "patterns": [
                      { "type": "id", "id": "uimm" },
                      { "type": "literal", "value": "0b000" }
                    ]
                  }
                ]
              }
            ]
          }
        },
        {
          "number": 1,
          "source": "mapping clause assembly = C_LHU(uimm, rsc, rdc)\n  <-> \"c.lhu\" ^ spc() ^ creg_name(rdc) ^ sep() ^ creg_name(rsc) ^ sep() ^ hex_bits_4(uimm @ 0b000)",
          "left": {
            "type": "app",
            "id": "C_LHU",
            "patterns": [
              { "type": "id", "id": "uimm" },
              { "type": "id", "id": "rsc" },
              { "type": "id", "id": "rdc" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.lhu\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rdc" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rsc" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_4",
                "patterns": [
                  {
                    "type": "vector_concat",
                    "patterns": [
                      { "type": "id", "id": "uimm" },
                      { "type": "literal", "value": "0b000" }
                    ]
                  }
                ]
              }
            ]
          }
        },
        {
          "number": 2,
          "source": "mapping clause assembly = C_LHU(uimm, rsc, rdc)\n  <-> \"c.lh\" ^ spc() ^ creg_name(rdc) ^ sep() ^ creg_name(rsc) ^ sep() ^ hex_bits_4(uimm @ 0b000)",
          "left": {
            "type": "app",
            "id": "C_LHU",
            "patterns": [
              { "type": "id", "id": "uimm" },
              { "type": "id", "id": "rsc" },
              { "type": "id", "id": "rdc" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.lh\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rdc" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rsc" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_4",
                "patterns": [
                  {
                    "type": "vector_concat",
                    "patterns": [
                      { "type": "id", "id": "uimm" },
                      { "type": "literal", "value": "0b000" }
                    ]
                  }
                ]
              }
            ]
          }
        },
        {
          "number": 3,
          "source": "mapping clause assembly = C_SB(uimm, rs1, rs2)\n  <-> \"c.sb\" ^ spc() ^ creg_name(rs2) ^ sep() ^ creg_name(rs1) ^ sep() ^ hex_bits_5(uimm @ 0b000)",
          "left": {
            "type": "app",
            "id": "C_SB",
            "patterns": [
              { "type": "id", "id": "uimm" },
              { "type": "id", "id": "rs1" },
              { "type": "id", "id": "rs2" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.sb\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rs2" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rs1" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_5",
                "patterns": [
                  {
                    "type": "vector_concat",
                    "patterns": [
                      { "type": "id", "id": "uimm" },
                      { "type": "literal", "value": "0b000" }
                    ]
                  }
                ]
              }
            ]
          }
        },
        {
          "number": 4,
          "source": "mapping clause assembly = C_SH(uimm, rs1, rs2)\n  <-> \"c.sh\" ^ spc() ^ creg_name(rs2) ^ sep() ^ creg_name(rs1) ^ sep() ^ hex_bits_4(uimm @ 0b000)",
          "left": {
            "type": "app",
            "id": "C_SH",
            "patterns": [
              { "type": "id", "id": "uimm" },
              { "type": "id", "id": "rs1" },
              { "type": "id", "id": "rs2" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.sh\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rs2" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rs1" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_4",
                "patterns": [
                  {
                    "type": "vector_concat",
                    "patterns": [
                      { "type": "id", "id": "uimm" },
                      { "type": "literal", "value": "0b000" }
                    ]
                  }
                ]
              }
            ]
          }
        },
        {
          "number": 5,
          "source": "mapping clause assembly = C_ZEXT_B(rsd)\n  <-> \"c.zext.b\" ^ spc() ^ creg_name(rsd)",
          "left": {
            "type": "app",
            "id": "C_ZEXT_B",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.zext.b\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rsd" } ]
              }
            ]
          }
        },
        {
          "number": 6,
          "source": "mapping clause assembly = C_SEXT_B(rsd)\n  <-> \"c.sext.b\" ^ spc() ^ creg_name(rsd)",
          "left": {
            "type": "app",
            "id": "C_SEXT_B",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.sext.b\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rsd" } ]
              }
            ]
          }
        },
        {
          "number": 7,
          "source": "mapping clause assembly = C_ZEXT_H(rsd)\n  <-> \"c.zext.h\" ^ spc() ^ creg_name(rsd)",
          "left": {
            "type": "app",
            "id": "C_ZEXT_H",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.zext.h\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rsd" } ]
              }
            ]
          }
        },
        {
          "number": 8,
          "source": "mapping clause assembly = C_SEXT_H(rsd)\n  <-> \"c.sext.h\" ^ spc() ^ creg_name(rsd)",
          "left": {
            "type": "app",
            "id": "C_SEXT_H",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.sext.h\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rsd" } ]
              }
            ]
          }
        },
        {
          "number": 9,
          "source": "mapping clause assembly = C_ZEXT_W(rsd)\n  <-> \"c.zext.w\" ^ spc() ^ creg_name(rsd)",
          "left": {
            "type": "app",
            "id": "C_ZEXT_W",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.zext.w\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rsd" } ]
              }
            ]
          }
        },
        {
          "number": 10,
          "source": "mapping clause assembly = C_MUL(rsd, rs2) <->\n  \"c.mul\" ^ spc() ^ creg_name(rsd) ^ spc() ^ creg_name(rs2)",
          "left": {
            "type": "app",
            "id": "C_MUL",
            "patterns": [
              { "type": "id", "id": "rsd" }, { "type": "id", "id": "rs2" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.mul\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rsd" } ]
              },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rs2" } ]
              }
            ]
          }
        },
        {
          "number": 11,
          "source": "mapping clause assembly = C_NOT(rsd) <->\n  \"c.not\" ^ spc() ^ creg_name(rsd)",
          "left": {
            "type": "app",
            "id": "C_NOT",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"c.not\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "creg_name",
                "patterns": [ { "type": "id", "id": "rsd" } ]
              }
            ]
          }
        },
        {
          "number": 12,
          "source": "mapping clause assembly = CM_PUSH(rlist,spimm) <->\n  \"cm.push\" ^ spc() ^ hex_bits_4(rlist) ^ sep() ^ hex_bits_2(spimm)",
          "left": {
            "type": "app",
            "id": "CM_PUSH",
            "patterns": [
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"cm.push\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_4",
                "patterns": [ { "type": "id", "id": "rlist" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_2",
                "patterns": [ { "type": "id", "id": "spimm" } ]
              }
            ]
          }
        },
        {
          "number": 13,
          "source": "mapping clause assembly = CM_POP(rlist,spimm) <->\n  \"cm.pop\" ^ spc() ^ hex_bits_4(rlist) ^ sep() ^ hex_bits_2(spimm)",
          "left": {
            "type": "app",
            "id": "CM_POP",
            "patterns": [
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"cm.pop\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_4",
                "patterns": [ { "type": "id", "id": "rlist" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_2",
                "patterns": [ { "type": "id", "id": "spimm" } ]
              }
            ]
          }
        },
        {
          "number": 14,
          "source": "mapping clause assembly = CM_POPRETZ(rlist,spimm) <->\n  \"cm.popretz\" ^ spc() ^ hex_bits_4(rlist) ^ sep() ^ hex_bits_2(spimm)",
          "left": {
            "type": "app",
            "id": "CM_POPRETZ",
            "patterns": [
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"cm.popretz\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_4",
                "patterns": [ { "type": "id", "id": "rlist" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_2",
                "patterns": [ { "type": "id", "id": "spimm" } ]
              }
            ]
          }
        },
        {
          "number": 15,
          "source": "mapping clause assembly = CM_POPRET(rlist,spimm) <->\n  \"cm.popret\" ^ spc() ^ hex_bits_4(rlist) ^ sep() ^ hex_bits_2(spimm)",
          "left": {
            "type": "app",
            "id": "CM_POPRET",
            "patterns": [
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"cm.popret\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_4",
                "patterns": [ { "type": "id", "id": "rlist" } ]
              },
              {
                "type": "app",
                "id": "sep",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_2",
                "patterns": [ { "type": "id", "id": "spimm" } ]
              }
            ]
          }
        },
        {
          "number": 16,
          "source": "mapping clause assembly = CM_MVSA01(sreg1,sreg2) <->\n  \"cm.mvsa01\" ^ spc() ^ hex_bits_3(sreg1) ^ spc() ^ hex_bits_3(sreg2)",
          "left": {
            "type": "app",
            "id": "CM_MVSA01",
            "patterns": [
              { "type": "id", "id": "sreg1" },
              { "type": "id", "id": "sreg2" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"cm.mvsa01\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_3",
                "patterns": [ { "type": "id", "id": "sreg1" } ]
              },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_3",
                "patterns": [ { "type": "id", "id": "sreg2" } ]
              }
            ]
          }
        },
        {
          "number": 17,
          "source": "mapping clause assembly = CM_MVA01S(sreg1,sreg2) <->\n  \"cm.mva01s\" ^ spc() ^ hex_bits_3(sreg1) ^ spc() ^ hex_bits_3(sreg2)",
          "left": {
            "type": "app",
            "id": "CM_MVA01S",
            "patterns": [
              { "type": "id", "id": "sreg1" },
              { "type": "id", "id": "sreg2" }
            ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"cm.mva01s\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_3",
                "patterns": [ { "type": "id", "id": "sreg1" } ]
              },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_3",
                "patterns": [ { "type": "id", "id": "sreg2" } ]
              }
            ]
          }
        },
        {
          "number": 18,
          "source": "mapping clause assembly = CM_JT(index) <->\n  \"cm.jt\" ^ spc() ^ hex_bits_8(index)",
          "left": {
            "type": "app",
            "id": "CM_JT",
            "patterns": [ { "type": "id", "id": "index" } ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"cm.jt\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_8",
                "patterns": [ { "type": "id", "id": "index" } ]
              }
            ]
          }
        },
        {
          "number": 19,
          "source": "mapping clause assembly = CM_JALT(index) <->\n  \"cm.jalt\" ^ spc() ^ hex_bits_8(index)",
          "left": {
            "type": "app",
            "id": "CM_JALT",
            "patterns": [ { "type": "id", "id": "index" } ]
          },
          "right": {
            "type": "string_append",
            "patterns": [
              { "type": "literal", "value": "\"cm.jalt\"" },
              {
                "type": "app",
                "id": "spc",
                "patterns": [ { "type": "literal", "value": "()" } ]
              },
              {
                "type": "app",
                "id": "hex_bits_8",
                "patterns": [ { "type": "id", "id": "index" } ]
              }
            ]
          }
        }
      ]
    },
    "encdec_compressed": {
      "mapping": [
        {
          "number": 0,
          "source": "mapping clause encdec_compressed = C_LBU(ui65, rs1, rd)\n  <-> 0b100 @ 0b000 @ rs1 : cregidx @ ui65 : bits(2) @ rd : cregidx @ 0b00",
          "left": {
            "type": "app",
            "id": "C_LBU",
            "patterns": [
              { "type": "id", "id": "ui65" },
              { "type": "id", "id": "rs1" },
              { "type": "id", "id": "rd" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b000" },
              { "type": "id", "id": "rs1" },
              { "type": "id", "id": "ui65" },
              { "type": "id", "id": "rd" },
              { "type": "literal", "value": "0b00" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x0, attr: ['2', 'C0'], type: 8 },\n    { bits: 3, name: 'rd', attr: '3', type: 2 },\n    { bits: 2, name: 'ui65', attr: '2', type: 2 },\n    { bits: 3, name: 'rs1', attr: '3', type: 2 },\n    { bits: 3, name: 0x0, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 1,
          "source": "mapping clause encdec_compressed = C_LHU(ui5, rs1, rd)\n  <-> 0b100 @ 0b001 @ rs1 : cregidx @ 0b0 @ ui5 : bits(1) @ rd : cregidx @ 0b00",
          "left": {
            "type": "app",
            "id": "C_LHU",
            "patterns": [
              { "type": "id", "id": "ui5" },
              { "type": "id", "id": "rs1" },
              { "type": "id", "id": "rd" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b001" },
              { "type": "id", "id": "rs1" },
              { "type": "literal", "value": "0b0" },
              { "type": "id", "id": "ui5" },
              { "type": "id", "id": "rd" },
              { "type": "literal", "value": "0b00" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x0, attr: ['2', 'C0'], type: 8 },\n    { bits: 3, name: 'rd', attr: '3', type: 2 },\n    { bits: 1, name: 'ui5', attr: '1', type: 2 },\n    { bits: 1, name: 0x0, attr: '1', type: 8 },\n    { bits: 3, name: 'rs1', attr: '3', type: 2 },\n    { bits: 3, name: 0x1, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 2,
          "source": "mapping clause encdec_compressed = C_LH(ui5, rs1, rd)\n  <-> 0b100 @ 0b001 @ rs1 : cregidx @ 0b1 @ ui5 : bits(1) @ rd : cregidx @ 0b00",
          "left": {
            "type": "app",
            "id": "C_LH",
            "patterns": [
              { "type": "id", "id": "ui5" },
              { "type": "id", "id": "rs1" },
              { "type": "id", "id": "rd" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b001" },
              { "type": "id", "id": "rs1" },
              { "type": "literal", "value": "0b1" },
              { "type": "id", "id": "ui5" },
              { "type": "id", "id": "rd" },
              { "type": "literal", "value": "0b00" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x0, attr: ['2', 'C0'], type: 8 },\n    { bits: 3, name: 'rd', attr: '3', type: 2 },\n    { bits: 1, name: 'ui5', attr: '1', type: 2 },\n    { bits: 1, name: 0x1, attr: '1', type: 8 },\n    { bits: 3, name: 'rs1', attr: '3', type: 2 },\n    { bits: 3, name: 0x1, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 3,
          "source": "mapping clause encdec_compressed = C_SB(ui65, rs1, rs2)\n  <-> 0b100 @ 0b010 @ rs1 : cregidx @ ui65 : bits(2) @ rs2 : cregidx @ 0b00",
          "left": {
            "type": "app",
            "id": "C_SB",
            "patterns": [
              { "type": "id", "id": "ui65" },
              { "type": "id", "id": "rs1" },
              { "type": "id", "id": "rs2" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b010" },
              { "type": "id", "id": "rs1" },
              { "type": "id", "id": "ui65" },
              { "type": "id", "id": "rs2" },
              { "type": "literal", "value": "0b00" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x0, attr: ['2', 'C0'], type: 8 },\n    { bits: 3, name: 'rs2', attr: '3', type: 2 },\n    { bits: 2, name: 'ui65', attr: '2', type: 2 },\n    { bits: 3, name: 'rs1', attr: '3', type: 2 },\n    { bits: 3, name: 0x2, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 4,
          "source": "mapping clause encdec_compressed = C_SH(ui5, rs1, rs2)\n  <-> 0b100 @ 0b011 @ rs1 : cregidx @ 0b0 @ ui5 : bits(1) @ rs2 : cregidx @ 0b00",
          "left": {
            "type": "app",
            "id": "C_SH",
            "patterns": [
              { "type": "id", "id": "ui5" },
              { "type": "id", "id": "rs1" },
              { "type": "id", "id": "rs2" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b011" },
              { "type": "id", "id": "rs1" },
              { "type": "literal", "value": "0b0" },
              { "type": "id", "id": "ui5" },
              { "type": "id", "id": "rs2" },
              { "type": "literal", "value": "0b00" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x0, attr: '2', type: 8 },\n    { bits: 3, name: 'rs2', attr: ['3', 'C0'], type: 2 },\n    { bits: 1, name: 'ui5', attr: '1', type: 2 },\n    { bits: 1, name: 0x0, attr: '1', type: 8 },\n    { bits: 3, name: 'rs1', attr: '3', type: 2 },\n    { bits: 3, name: 0x3, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 5,
          "source": "mapping clause encdec_compressed = C_ZEXT_B(rsd)\n  <-> 0b100 @ 0b111 @ rsd : cregidx @ 0b11 @ 0b000 @ 0b01",
          "left": {
            "type": "app",
            "id": "C_ZEXT_B",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b111" },
              { "type": "id", "id": "rsd" },
              { "type": "literal", "value": "0b11" },
              { "type": "literal", "value": "0b000" },
              { "type": "literal", "value": "0b01" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x1, attr: ['2', 'C1'], type: 8 },\n    { bits: 3, name: 0x0, attr: ['3', 'C.ZEXT.B'], type: 8 },\n    { bits: 2, name: 0x3, attr: ['2', 'FUNCT2'], type: 8 },\n    { bits: 3, name: 'rsd', attr: ['3', 'SRCDST'], type: 2 },\n    { bits: 3, name: 0x7, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 6,
          "source": "mapping clause encdec_compressed = C_SEXT_B(rsd)\n  <-> 0b100 @ 0b111 @ rsd : cregidx @ 0b11 @ 0b001 @ 0b01",
          "left": {
            "type": "app",
            "id": "C_SEXT_B",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b111" },
              { "type": "id", "id": "rsd" },
              { "type": "literal", "value": "0b11" },
              { "type": "literal", "value": "0b001" },
              { "type": "literal", "value": "0b01" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x1, attr: ['2', 'C1'], type: 8 },\n    { bits: 3, name: 0x1, attr: ['3', 'C.SEXT.B'], type: 8 },\n    { bits: 2, name: 0x3, attr: ['2', 'FUNCT2'], type: 8 },\n    { bits: 3, name: 'rsd', attr: ['3', 'SRCDST'], type: 2 },\n    { bits: 3, name: 0x7, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 7,
          "source": "mapping clause encdec_compressed = C_ZEXT_H(rsd)\n  <-> 0b100 @ 0b111 @ rsd : cregidx @ 0b11 @ 0b010 @ 0b01",
          "left": {
            "type": "app",
            "id": "C_ZEXT_H",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b111" },
              { "type": "id", "id": "rsd" },
              { "type": "literal", "value": "0b11" },
              { "type": "literal", "value": "0b010" },
              { "type": "literal", "value": "0b01" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x1, attr: ['2', 'C1'], type: 8 },\n    { bits: 3, name: 0x2, attr: ['3', 'C.ZEXT.H'], type: 8 },\n    { bits: 2, name: 0x3, attr: ['2', 'FUNCT2'], type: 8 },\n    { bits: 3, name: 'rsd', attr: ['3', 'SRCDST'], type: 2 },\n    { bits: 3, name: 0x7, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 8,
          "source": "mapping clause encdec_compressed = C_SEXT_H(rsd)\n  <-> 0b100 @ 0b111 @ rsd : cregidx @ 0b11 @ 0b011 @ 0b01",
          "left": {
            "type": "app",
            "id": "C_SEXT_H",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b111" },
              { "type": "id", "id": "rsd" },
              { "type": "literal", "value": "0b11" },
              { "type": "literal", "value": "0b011" },
              { "type": "literal", "value": "0b01" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x1, attr: ['2', 'C1'], type: 8 },\n    { bits: 3, name: 0x3, attr: ['3', 'C.SEXT.H'], type: 8 },\n    { bits: 2, name: 0x3, attr: ['2', 'FUNCT2'], type: 8 },\n    { bits: 3, name: 'rsd', attr: ['3', 'SRCDST'], type: 2 },\n    { bits: 3, name: 0x7, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 9,
          "source": "mapping clause encdec_compressed = C_ZEXT_W(rsd)\n  <-> 0b100 @ 0b111 @ rsd : cregidx @ 0b11 @ 0b100 @ 0b01",
          "left": {
            "type": "app",
            "id": "C_ZEXT_W",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b111" },
              { "type": "id", "id": "rsd" },
              { "type": "literal", "value": "0b11" },
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b01" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x1, attr: ['2', 'C1'], type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'C.ZEXT.W'], type: 8 },\n    { bits: 2, name: 0x3, attr: ['2', 'FUNCT2'], type: 8 },\n    { bits: 3, name: 'rsd', attr: ['3', 'SRCDST'], type: 2 },\n    { bits: 3, name: 0x7, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 10,
          "source": "mapping clause encdec_compressed = C_MUL(rsd, rs2)\n  <-> 0b100 @ 0b111 @ rsd : cregidx @ 0b00 @ rs2 : cregidx @ 0b01",
          "left": {
            "type": "app",
            "id": "C_MUL",
            "patterns": [
              { "type": "id", "id": "rsd" }, { "type": "id", "id": "rs2" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b111" },
              { "type": "id", "id": "rsd" },
              { "type": "literal", "value": "0b00" },
              { "type": "id", "id": "rs2" },
              { "type": "literal", "value": "0b01" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x1, attr: ['2', 'C1'], type: 8 },\n    { bits: 3, name: 'rs2', attr: ['3', 'C.MUL'], type: 2 },\n    { bits: 2, name: 0x0, attr: ['2', 'FUNCT2'], type: 8 },\n    { bits: 3, name: 'rsd', attr: ['3', 'SRCDST'], type: 2 },\n    { bits: 3, name: 0x7, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 11,
          "source": "mapping clause encdec_compressed = C_NOT(rsd)\n  <-> 0b100 @ 0b111 @ rsd : cregidx @ 0b11 @ 0b101 @ 0b01",
          "left": {
            "type": "app",
            "id": "C_NOT",
            "patterns": [ { "type": "id", "id": "rsd" } ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b100" },
              { "type": "literal", "value": "0b111" },
              { "type": "id", "id": "rsd" },
              { "type": "literal", "value": "0b11" },
              { "type": "literal", "value": "0b101" },
              { "type": "literal", "value": "0b01" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x1, attr: ['2', 'C1'], type: 8 },\n    { bits: 3, name: 0x5, attr: ['3', 'C.NOT'], type: 8 },\n    { bits: 2, name: 0x3, attr: ['2', 'FUNCT2'], type: 8 },\n    { bits: 3, name: 'rsd', attr: ['3', 'SRCDST'], type: 2 },\n    { bits: 3, name: 0x7, attr: '3', type: 8 },\n    { bits: 3, name: 0x4, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 12,
          "source": "mapping clause encdec_compressed = CM_PUSH(rlist,spimm)\n  <-> 0b101 @ 0b11000 @ rlist : bits(4) @ spimm : bits(2) @ 0b10",
          "left": {
            "type": "app",
            "id": "CM_PUSH",
            "patterns": [
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b101" },
              { "type": "literal", "value": "0b11000" },
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" },
              { "type": "literal", "value": "0b10" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x2, attr: ['2', 'C2'], type: 8 },\n    { bits: 2, name: 'spimm', attr: '2', type: 2 },\n    { bits: 4, name: 'rlist', attr: '4', type: 2 },\n    { bits: 5, name: 0x18, attr: '5', type: 8 },\n    { bits: 3, name: 0x5, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 13,
          "source": "mapping clause encdec_compressed = CM_POP(rlist,spimm)\n  <-> 0b101 @ 0b11010 @ rlist : bits(4) @ spimm : bits(2) @ 0b10",
          "left": {
            "type": "app",
            "id": "CM_POP",
            "patterns": [
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b101" },
              { "type": "literal", "value": "0b11010" },
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" },
              { "type": "literal", "value": "0b10" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x2, attr: ['2', 'C2'], type: 8 },\n    { bits: 2, name: 'spimm', attr: '2', type: 2 },\n    { bits: 4, name: 'rlist', attr: '4', type: 2 },\n    { bits: 5, name: 0x1A, attr: '5', type: 8 },\n    { bits: 3, name: 0x5, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 14,
          "source": "mapping clause encdec_compressed = CM_POPRETZ(rlist,spimm)\n  <-> 0b101 @ 0b11100 @ rlist : bits(4) @ spimm : bits(2) @ 0b10",
          "left": {
            "type": "app",
            "id": "CM_POPRETZ",
            "patterns": [
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b101" },
              { "type": "literal", "value": "0b11100" },
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" },
              { "type": "literal", "value": "0b10" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x2, attr: ['2', 'C2'], type: 8 },\n    { bits: 2, name: 'spimm', attr: '2', type: 2 },\n    { bits: 4, name: 'rlist', attr: '4', type: 2 },\n    { bits: 5, name: 0x1C, attr: '5', type: 8 },\n    { bits: 3, name: 0x5, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 15,
          "source": "mapping clause encdec_compressed = CM_POPRET(rlist,spimm)\n  <-> 0b101 @ 0b11110 @ rlist : bits(4) @ spimm : bits(2) @ 0b10",
          "left": {
            "type": "app",
            "id": "CM_POPRET",
            "patterns": [
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b101" },
              { "type": "literal", "value": "0b11110" },
              { "type": "id", "id": "rlist" },
              { "type": "id", "id": "spimm" },
              { "type": "literal", "value": "0b10" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x2, attr: ['2', 'C2'], type: 8 },\n    { bits: 2, name: 'spimm', attr: '2', type: 2 },\n    { bits: 4, name: 'rlist', attr: '4', type: 2 },\n    { bits: 5, name: 0x1E, attr: '5', type: 8 },\n    { bits: 3, name: 0x5, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 16,
          "source": "mapping clause encdec_compressed = CM_MVSA01(sreg1,sreg2)\n  <-> 0b101 @ 0b011 @ sreg1 : bits(3) @ 0b01 @ sreg2 : bits(3) @ 0b10",
          "left": {
            "type": "app",
            "id": "CM_MVSA01",
            "patterns": [
              { "type": "id", "id": "sreg1" },
              { "type": "id", "id": "sreg2" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b101" },
              { "type": "literal", "value": "0b011" },
              { "type": "id", "id": "sreg1" },
              { "type": "literal", "value": "0b01" },
              { "type": "id", "id": "sreg2" },
              { "type": "literal", "value": "0b10" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x2, attr: ['2', 'C2'], type: 8 },\n    { bits: 3, name: 'sreg2', attr: '3', type: 2 },\n    { bits: 2, name: 0x1, attr: '2', type: 8 },\n    { bits: 3, name: 'sreg1', attr: '3', type: 2 },\n    { bits: 3, name: 0x3, attr: '3', type: 8 },\n    { bits: 3, name: 0x5, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 17,
          "source": "mapping clause encdec_compressed = CM_MVA01S(sreg1,sreg2)\n  <-> 0b101 @ 0b011 @ sreg1 : bits(3) @ 0b11 @ sreg2 : bits(3) @ 0b10",
          "left": {
            "type": "app",
            "id": "CM_MVA01S",
            "patterns": [
              { "type": "id", "id": "sreg1" },
              { "type": "id", "id": "sreg2" }
            ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b101" },
              { "type": "literal", "value": "0b011" },
              { "type": "id", "id": "sreg1" },
              { "type": "literal", "value": "0b11" },
              { "type": "id", "id": "sreg2" },
              { "type": "literal", "value": "0b10" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x2, attr: ['2', 'C2'], type: 8 },\n    { bits: 3, name: 'sreg2', attr: '3', type: 2 },\n    { bits: 2, name: 0x3, attr: '2', type: 8 },\n    { bits: 3, name: 'sreg1', attr: '3', type: 2 },\n    { bits: 3, name: 0x3, attr: '3', type: 8 },\n    { bits: 3, name: 0x5, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 18,
          "source": "mapping clause encdec_compressed = CM_JT(index)\n  <-> 0b101 @ 0b000 @ index : bits(8) @ 0b10",
          "left": {
            "type": "app",
            "id": "CM_JT",
            "patterns": [ { "type": "id", "id": "index" } ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b101" },
              { "type": "literal", "value": "0b000" },
              { "type": "id", "id": "index" },
              { "type": "literal", "value": "0b10" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x2, attr: ['2', 'C2'], type: 8 },\n    { bits: 8, name: 'index', attr: '8', type: 2 },\n    { bits: 3, name: 0x0, attr: '3', type: 8 },\n    { bits: 3, name: 0x5, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        },
        {
          "number": 19,
          "source": "mapping clause encdec_compressed = CM_JALT(index)\n  <-> 0b101 @ 0b000 @ index : bits(8) @ 0b10",
          "left": {
            "type": "app",
            "id": "CM_JALT",
            "patterns": [ { "type": "id", "id": "index" } ]
          },
          "right": {
            "type": "vector_concat",
            "patterns": [
              { "type": "literal", "value": "0b101" },
              { "type": "literal", "value": "0b000" },
              { "type": "id", "id": "index" },
              { "type": "literal", "value": "0b10" }
            ]
          },
          "right_wavedrom": "{reg:[\n    { bits: 2, name: 0x2, attr: ['2', 'C2'], type: 8 },\n    { bits: 8, name: 'index', attr: '8', type: 2 },\n    { bits: 3, name: 0x0, attr: '3', type: 8 },\n    { bits: 3, name: 0x5, attr: ['3', 'FUNCT3'], type: 8 }\n]}"
        }
      ]
    }
  },
  "vals": {},
  "types": {},
  "registers": {},
  "lets": {},
  "anchors": {},
  "spans": {}
}
